@page "/counter/{GroupName}"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Increment</button>
<button class="btn btn-danger" @onclick="ResetCount">Reset</button>

@code {
    [Parameter] public string GroupName { get; set; } = string.Empty;



    private HubConnection? hubConnection;

    private int currentCount = 0;



    protected override async Task OnInitializedAsync()

    {

        hubConnection = new HubConnectionBuilder()

            .WithUrl(Navigation.ToAbsoluteUri($"/counterhub"))

            .Build();



        hubConnection.On<int>("ReceiveCount", (count) =>

        {

            currentCount = count;

            InvokeAsync(StateHasChanged);

        });



        await hubConnection.StartAsync();

        await hubConnection.SendAsync("JoinGroup", GroupName); // Unirse al grupo usando el parámetro de ruta

    }



    private async Task IncrementCount()

    {

        if (hubConnection is not null)

        {

            await hubConnection.SendAsync("IncrementCounter", GroupName); // Enviar nombre del grupo

        }

    }



    private async Task ResetCount()

    {

        if (hubConnection is not null)

        {

            await hubConnection.SendAsync("ResetCounter", GroupName); // Enviar nombre del grupo

        }

    }



    public bool IsConnected =>

        hubConnection?.State == HubConnectionState.Connected;



    public async ValueTask DisposeAsync()

    {

        if (hubConnection is not null)

        {

            await hubConnection.SendAsync("LeaveGroup", GroupName); // Salir del grupo

            await hubConnection.DisposeAsync();

        }

    }
}
