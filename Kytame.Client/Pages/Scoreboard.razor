@page "/scoreboard/{GroupName?}"
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveWebAssembly
@using System.Timers
@using Microsoft.AspNetCore.WebUtilities
@using QRCoder
@inject NavigationManager Navigation

<div class="container">
    <div class="scoreboard-container">
        <div class="team-score red">
            <h2>@team1Name</h2>
            <div class="score">@team1Score</div>
            <button @onclick="() => AddPointsTeam1(1)" title="Golpe con puño en el tronco (1 punto)">+1</button>
            <button @onclick="() => AddPointsTeam1(2)" title="Patada en el tronco (2 puntos)">+2</button>
            <button @onclick="() => AddPointsTeam1(4)" title="Patada con giro en el tronco (4 puntos)">+4</button>
            <button @onclick="() => AddPointsTeam1(3)" title="Patada a la cabeza (3 puntos)">+3</button>
            <button @onclick="() => AddPointsTeam1(5)" title="Patada con giro a la cabeza (5 puntos)">+5</button>
            <div>Penalty</div>
            <div class="penalty">@team1Penalty</div>
            <button @onclick="IncrementTeam1Penalty">+</button>
            <button @onclick="DecrementTeam1Penalty">-</button>
        </div>

        <div class="timer-container">
            <h2>Round @currentRound de 3</h2>
            <div class="timer">@timerMinutes.ToString("D2"):@timerSeconds.ToString("D2")</div>
            <button @onclick="StartStopTimer">@((timerRunning ? "Parar" : "Empezar"))</button>
            <button @onclick="ResetRound">Reset</button>
            <button @onclick="UndoLastAction">Deshacer</button>
        </div>

        <div class="team-score blue">
            <h2>@team2Name</h2>
            <div class="score">@team2Score</div>
            <button @onclick="() => AddPointsTeam2(1)" title="Golpe con puño en el tronco (1 punto)">+1</button>
            <button @onclick="() => AddPointsTeam2(2)" title="Patada en el tronco (2 puntos)">+2</button>
            <button @onclick="() => AddPointsTeam2(4)" title="Patada con giro en el tronco (4 puntos)">+4</button>
            <button @onclick="() => AddPointsTeam2(3)" title="Patada a la cabeza (3 puntos)">+3</button>
            <button @onclick="() => AddPointsTeam2(5)" title="Patada con giro a la cabeza (5 puntos)">+5</button>
            <div>Penalty</div>
            <div class="penalty">@team2Penalty</div>
            <button @onclick="IncrementTeam2Penalty">+</button>
            <button @onclick="DecrementTeam2Penalty">-</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? GroupName { get; set; }

    private string team1Name = "Participante 1";
    private string team2Name = "Participante 2";
    private int team1Score = 0;
    private int team2Score = 0;
    private int team1Penalty = 0;
    private int team2Penalty = 0;
    private int currentRound = 1;
    private const int totalRounds = 3;
    private bool isFirstRound => currentRound == 1;
    private bool isLastRound => currentRound == totalRounds;

    private Timer timer;
    private int timerMinutes = 2;
    private int timerSeconds = 0;
    private bool timerRunning = false;

    private HubConnection hubConnection;

    private Stack<(string Team, int Points)> actionHistory = new Stack<(string Team, int Points)>();

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("team1Name", out var team1))
        {
            team1Name = team1;
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("team2Name", out var team2))
        {
            team2Name = team2;
        }

        if (string.IsNullOrWhiteSpace(GroupName))
        {
            GroupName = Guid.NewGuid().ToString();
            Navigation.NavigateTo($"/scoreboard/{GroupName}", forceLoad: true);
            return;
        }

        timer = new Timer(1000);
        timer.Elapsed += async (sender, e) => await OnTimerElapsed();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/scoreboardHub"))
            .Build();

        hubConnection.On<int, int, int, int>("ReceiveScoreUpdate", (t1Score, t2Score, t1Penalty, t2Penalty) =>
        {
            team1Score = t1Score;
            team2Score = t2Score;
            team1Penalty = t1Penalty;
            team2Penalty = t2Penalty;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int, int, bool>("ReceiveTimerUpdate", (minutes, seconds, isRunning) =>
        {
            timerMinutes = minutes;
            timerSeconds = seconds;
            timerRunning = isRunning;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("ReceiveRoundUpdate", (round) =>
        {
            currentRound = round;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGroup", GroupName);
    }

    private async Task OnTimerElapsed()
    {
        if (timerMinutes == 0 && timerSeconds == 0)
        {
            timer.Stop();
            timerRunning = false;
        }
        else
        {
            if (timerSeconds == 0)
            {
                timerMinutes--;
                timerSeconds = 59;
            }
            else
            {
                timerSeconds--;
            }
        }
        await UpdateTimer();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateScore()
    {
        await hubConnection.SendAsync("UpdateScore", GroupName, team1Score, team2Score, team1Penalty, team2Penalty);
    }

    private async Task UpdateTimer()
    {
        await hubConnection.SendAsync("UpdateTimer", GroupName, timerMinutes, timerSeconds, timerRunning);
    }

    private async Task UpdateRound()
    {
        await hubConnection.SendAsync("UpdateRound", GroupName, currentRound);
    }

    private void AddPointsTeam1(int points)
    {
        team1Score += points;
        actionHistory.Push(("Team1", points));
        UpdateScore();
    }

    private void AddPointsTeam2(int points)
    {
        team2Score += points;
        actionHistory.Push(("Team2", points));
        UpdateScore();
    }

    private void IncrementTeam1Penalty()
    {
        team1Penalty++;
        UpdateScore();
    }

    private void DecrementTeam1Penalty()
    {
        if (team1Penalty > 0) team1Penalty--;
        UpdateScore();
    }

    private void IncrementTeam2Penalty()
    {
        team2Penalty++;
        UpdateScore();
    }

    private void DecrementTeam2Penalty()
    {
        if (team2Penalty > 0) team2Penalty--;
        UpdateScore();
    }

    private void StartStopTimer()
    {
        timerRunning = !timerRunning;
        if (timerRunning)
        {
            timer.Start();
        }
        else
        {
            timer.Stop();
        }
        UpdateTimer();
    }

    private void ResetRound()
    {
        timer.Stop();
        timerMinutes = 2;
        timerSeconds = 0;
        timerRunning = false;
        UpdateTimer();

        if (currentRound < totalRounds)
        {
            currentRound++;
            UpdateRound();
        }
    }

    private void UndoLastAction()
    {
        if (actionHistory.Count > 0)
        {
            var lastAction = actionHistory.Pop();
            if (lastAction.Team == "Team1")
            {
                team1Score -= lastAction.Points;
                if (team1Score < 0) team1Score = 0;
            }
            else if (lastAction.Team == "Team2")
            {
                team2Score -= lastAction.Points;
                if (team2Score < 0) team2Score = 0;
            }
            UpdateScore();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveGroup", GroupName);
            await hubConnection.DisposeAsync();
        }

        timer?.Dispose();
    }
}
