@page "/scoreboard/{GroupName?}"
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveWebAssembly
@using System.Timers
@inject NavigationManager Navigation
@inject LocalStorageService LocalStorage

<div class="scoreboard-container">
    <!-- Contenedor para el equipo rojo -->
    <div class="team-score red">
        <h2>@team1Name</h2>
        <div class="score">@team1Score</div>
        <button @onclick="IncrementTeam1Score">+</button>
        <button @onclick="DecrementTeam1Score">-</button>
        <div>Penalty</div>
        <div class="penalty">@team1Penalty</div>
        <button @onclick="IncrementTeam1Penalty">+</button>
        <button @onclick="DecrementTeam1Penalty">-</button>
    </div>

    <!-- Contenedor del temporizador -->
    <div class="timer-container">
        <h2>Round @currentRound</h2>
        <div class="timer">@timerMinutes.ToString("D2"):@timerSeconds.ToString("D2")</div>
        <button @onclick="StartStopTimer">@((timerRunning ? "Stop" : "Start"))</button>
        <button @onclick="ResetTimer">Reset</button>
    </div>

    <!-- Contenedor para el equipo azul -->
    <div class="team-score blue">
        <h2>@team2Name</h2>
        <div class="score">@team2Score</div>
        <button @onclick="IncrementTeam2Score">+</button>
        <button @onclick="DecrementTeam2Score">-</button>
        <div>Penalty</div>
        <div class="penalty">@team2Penalty</div>
        <button @onclick="IncrementTeam2Penalty">+</button>
        <button @onclick="DecrementTeam2Penalty">-</button>
    </div>
</div>

@code {
    [Parameter] public string? GroupName { get; set; }

    private string team1Name = "Kim";
    private string team2Name = "Lee";
    private int pointsPerClick = 1;

    private int team1Score = 0;
    private int team2Score = 0;
    private int team1Penalty = 0;
    private int team2Penalty = 0;
    private int currentRound = 1;

    private Timer timer;
    private int timerMinutes = 1;
    private int timerSeconds = 50;
    private bool timerRunning = false;

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        // Cargar configuraciones desde sessionStorage usando el servicio
        if (await LocalStorage.GetItemAsync("Team1Name") != null)
        {
            team1Name = await LocalStorage.GetItemAsync("Team1Name");
            team2Name = await LocalStorage.GetItemAsync("Team2Name");
            timerMinutes = int.Parse(await LocalStorage.GetItemAsync("TimerMinutes"));
            timerSeconds = int.Parse(await LocalStorage.GetItemAsync("TimerSeconds"));
            pointsPerClick = int.Parse(await LocalStorage.GetItemAsync("PointsPerClick"));
        }

        // Si GroupName no está definido o es nulo, generamos uno único
        if (string.IsNullOrWhiteSpace(GroupName))
        {
            GroupName = Guid.NewGuid().ToString();
            // Redirigir a la URL actualizada con el nuevo GroupName
            Navigation.NavigateTo($"/scoreboard/{GroupName}", forceLoad: true);
            return;
        }

        // Initialize timer
        timer = new Timer(1000);
        timer.Elapsed += async (sender, e) => await OnTimerElapsed();

        // Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/scoreboardHub"))
            .Build();

        // Register handler for receiving updates from the hub
        hubConnection.On<int, int, int, int>("ReceiveScoreUpdate", (t1Score, t2Score, t1Penalty, t2Penalty) =>
        {
            team1Score = t1Score;
            team2Score = t2Score;
            team1Penalty = t1Penalty;
            team2Penalty = t2Penalty;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int, int, bool>("ReceiveTimerUpdate", (minutes, seconds, isRunning) =>
        {
            timerMinutes = minutes;
            timerSeconds = seconds;
            timerRunning = isRunning;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("ReceiveRoundUpdate", (round) =>
        {
            currentRound = round;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGroup", GroupName); // Unirse al grupo usando el parámetro de ruta
    }

    private async Task OnTimerElapsed()
    {
        if (timerMinutes == 0 && timerSeconds == 0)
        {
            timer.Stop();
            timerRunning = false;
        }
        else
        {
            if (timerSeconds == 0)
            {
                timerMinutes--;
                timerSeconds = 59;
            }
            else
            {
                timerSeconds--;
            }
        }
        await UpdateTimer();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateScore()
    {
        await hubConnection.SendAsync("UpdateScore", GroupName, team1Score, team2Score, team1Penalty, team2Penalty);
    }

    private async Task UpdateTimer()
    {
        await hubConnection.SendAsync("UpdateTimer", GroupName, timerMinutes, timerSeconds, timerRunning);
    }

    private async Task UpdateRound()
    {
        await hubConnection.SendAsync("UpdateRound", GroupName, currentRound);
    }

    private void IncrementTeam1Score()
    {
        team1Score += pointsPerClick;
        UpdateScore();
    }

    private void DecrementTeam1Score()
    {
        if (team1Score > 0) team1Score -= pointsPerClick;
        UpdateScore();
    }

    private void IncrementTeam2Score()
    {
        team2Score += pointsPerClick;
        UpdateScore();
    }

    private void DecrementTeam2Score()
    {
        if (team2Score > 0) team2Score -= pointsPerClick;
        UpdateScore();
    }

    private void IncrementTeam1Penalty()
    {
        team1Penalty++;
        UpdateScore();
    }

    private void DecrementTeam1Penalty()
    {
        if (team1Penalty > 0) team1Penalty--;
        UpdateScore();
    }

    private void IncrementTeam2Penalty()
    {
        team2Penalty++;
        UpdateScore();
    }

    private void DecrementTeam2Penalty()
    {
        if (team2Penalty > 0) team2Penalty--;
        UpdateScore();
    }

    private void StartStopTimer()
    {
        timerRunning = !timerRunning;
        if (timerRunning)
        {
            timer.Start();
        }
        else
        {
            timer.Stop();
        }
        UpdateTimer();
    }

    private void ResetTimer()
    {
        timer.Stop();
        timerRunning = false;
        timerMinutes = 1;
        timerSeconds = 50;
        UpdateTimer();
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.SendAsync("LeaveGroup", GroupName); // Dejar el grupo al cerrar el componente
        await hubConnection.DisposeAsync();
        timer?.Dispose();
    }
}
