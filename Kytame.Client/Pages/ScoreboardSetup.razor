@page "/"
@rendermode InteractiveWebAssembly
@using QRCoder
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client

<div class="config-container">
    <h3 class="config-title">Configuración de Marcador</h3>

    <div class="config-form-group">
        <label for="team1Name" class="config-label">Nombre del Equipo 1:</label>
        <input id="team1Name" @bind="team1Name" class="config-input" />
    </div>

    <div class="config-form-group">
        <label for="team2Name" class="config-label">Nombre del Equipo 2:</label>
        <input id="team2Name" @bind="team2Name" class="config-input" />
    </div>

    <button @onclick="StartGame" class="config-button">Iniciar Juego</button>

    @if (!string.IsNullOrEmpty(qrCodeUrl))
    {
        <div class="qr-container">
            <h2>QR Code for URL</h2>
            <img src="@qrCodeUrl" alt="QR Code" />
        </div>
    }

    <button @onclick="SkipConnection" class="config-button">Omitir Conexión</button>
</div>

@code {
    private string? groupName = "";

    private string? qrCodeUrl;
    private string team1Name = "Participante 1";
    private string team2Name = "Participante 2";
    private HubConnection? hubConnection;

    private string GenerateShortId(int length = 8)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async Task StartGamede()
    {
        var baseUri = new Uri(Navigation.Uri).GetLeftPart(UriPartial.Authority);
        groupName = GenerateShortId();
        var scoreboardUrl = $"/scoreboard-control/{groupName}?team1Name={team1Name}&team2Name={team2Name}";
        qrCodeUrl = GenerateQRCode(baseUri + scoreboardUrl);

        // Espera la conexión de clientes antes de proceder
        bool isConnected = await WaitForConnectionAsync(groupName, TimeSpan.FromMinutes(2));

        if (isConnected)
        {
            Navigation.NavigateTo($"/scoreboard/{groupName}?team1Name={team1Name}&team2Name={team2Name}");
        }
        else
        {
            Console.WriteLine("No se detectaron clientes conectados dentro del tiempo límite.");
        }
    }

    // Método que genera el código QR a partir de una URL
    private string GenerateQRCode(string url)
    {
        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(url, QRCodeGenerator.ECCLevel.Q);
        using var qrCode = new PngByteQRCode(qrCodeData);
        var qrCodeBytes = qrCode.GetGraphic(20);
        return $"data:image/png;base64,{Convert.ToBase64String(qrCodeBytes)}";
    }

    // Método que permite saltar la espera de conexión
    private void SkipConnection()
    {
        if (groupName == "")
        {
            groupName = GenerateShortId();
        }
        Navigation.NavigateTo($"/scoreboard/{groupName}?t1={team1Name}&t2={team2Name}");
    }

    // Método que espera la conexión de clientes en el grupo especificado
    private async Task<bool> WaitForConnectionAsync(string groupName, TimeSpan timeout)
    {
        var cancellationTokenSource = new CancellationTokenSource(timeout);

        while (!cancellationTokenSource.Token.IsCancellationRequested)
        {
            if (await IsClientConnectedAsync(groupName))
            {
                return true;
            }

            await Task.Delay(1000); // Espera 1 segundo antes de volver a intentar
        }

        return false; // No se conectaron clientes en el tiempo especificado
    }

    // Método que comprueba si hay clientes conectados en el grupo
    private async Task<bool> IsClientConnectedAsync(string groupName)
    {
        await EnsureHubConnection();

        try
        {
            var result = await hubConnection.InvokeAsync<bool>("AreClientsConnected", groupName);
            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking client connection: {ex.Message}");
            return false;
        }
    }

    // Método para asegurar la conexión con el Hub
    private async Task EnsureHubConnection()
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/scoreboardHub"))
                .Build();

            await hubConnection.StartAsync();
        }
    }

    // Método que se invoca al finalizar el componente
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
