@page "/"
@rendermode InteractiveWebAssembly
@using QRCoder
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client

<div class="config-container">
    <h3 class="config-title">Configuración de Marcador</h3>

    <div class="config-form-group">
        <label for="team1Name" class="config-label">Nombre del Equipo 1:</label>
        <input id="team1Name" @bind="team1Name" class="config-input" />
    </div>

    <div class="config-form-group">
        <label for="team2Name" class="config-label">Nombre del Equipo 2:</label>
        <input id="team2Name" @bind="team2Name" class="config-input" />
    </div>

    <button @onclick="StartGame" class="config-button">Iniciar Juego</button>

        @if (!string.IsNullOrEmpty(qrCodeUrl))
        {
    <div class="qr-container">
        <h2>QR Code for URL</h2>
            <img src="@qrCodeUrl" alt="QR Code" />
    </div>
        }
</div>

@code {
    private string? qrCodeUrl;
    private string team1Name = "Participante 1";
    private string team2Name = "Participante 2";

    private async Task StartGame()
    {
        string groupName = Guid.NewGuid().ToString();
        var uri = new Uri(Navigation.Uri);
        var baseUri = new Uri(uri.GetLeftPart(UriPartial.Authority));
        var qrCodeUrl = new Uri(baseUri, $"/scoreboard-control/{groupName}?team1Name={team1Name}&team2Name={team2Name}").ToString();

        GenerateQRCode(qrCodeUrl);

        bool isConnected = await WaitForConnectionAsync(groupName, TimeSpan.FromMinutes(2));

        if (isConnected)
        {
            Navigation.NavigateTo($"/scoreboard/{groupName}?team1Name={team1Name}&team2Name={team2Name}");
        }
        else
        {
  
        }
    }

    private void GenerateQRCode(string qrCodeUrl)
    {
        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(qrCodeUrl, QRCodeGenerator.ECCLevel.Q);
        using var qrCode = new PngByteQRCode(qrCodeData);
        var qrCodeBytes = qrCode.GetGraphic(20);

        this.qrCodeUrl = $"data:image/png;base64,{Convert.ToBase64String(qrCodeBytes)}";
    }

    private async Task<bool> WaitForConnectionAsync(string groupName, TimeSpan timeout)
    {
        var cancellationTokenSource = new CancellationTokenSource(timeout);
        bool isConnected = false;

        while (!cancellationTokenSource.Token.IsCancellationRequested)
        {
            isConnected = await IsClientConnectedAsync(groupName);

            if (isConnected)
            {
                break;
            }

            await Task.Delay(1000);
        }

        return isConnected;
    }

    private async Task<bool> IsClientConnectedAsync(string groupName)
    {
        var hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(Navigation.ToAbsoluteUri("/scoreboardHub").ToString())) 
            .Build();

        try
        {
            await hubConnection.StartAsync();
            var result = await hubConnection.InvokeAsync<bool>("AreClientsConnected", groupName);
            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking client connection: {ex.Message}");
            return false;
        }
        finally
        {
            await hubConnection.DisposeAsync();
        }
    }
}
