@page "/scoreboard-control/{GroupName}"
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveWebAssembly
@using System.Timers
@inject NavigationManager Navigation

<div class="scoreboard-control-container">
    <div class="team-control red">
        <h2>Participante 1</h2>
        <div class="controls">
            <button @onclick="() => AddPoints(ref team1Score, 1)" class="large-button">Punto +1</button>
            <button @onclick="() => AddPoints(ref team1Score, 2)" class="large-button">Punto +2</button>
            <button @onclick="() => AddPoints(ref team1Score, 4)" class="large-button">Punto +4</button>
            <button @onclick="() => AddPoints(ref team1Score, 3)" class="large-button">Punto +3</button>
            <button @onclick="() => AddPoints(ref team1Score, 5)" class="large-button">Punto +5</button>

            <!-- Línea divisoria -->
            <div class="penalty-section">
                <button @onclick="() => ModifyPenalty(ref team1Penalty, 1)" class="large-button">Penalty +</button>
                <button @onclick="() => ModifyPenalty(ref team1Penalty, -1)" class="large-button">Penalty -</button>
            </div>
        </div>
    </div>

    <div class="team-control blue">
        <h2>Participante 2</h2>
        <div class="controls">
            <button @onclick="() => AddPoints(ref team2Score, 1)" class="large-button">Punto +1</button>
            <button @onclick="() => AddPoints(ref team2Score, 2)" class="large-button">Punto +2</button>
            <button @onclick="() => AddPoints(ref team2Score, 4)" class="large-button">Punto +4</button>
            <button @onclick="() => AddPoints(ref team2Score, 3)" class="large-button">Punto +3</button>
            <button @onclick="() => AddPoints(ref team2Score, 5)" class="large-button">Punto +5</button>

            <!-- Línea divisoria -->
            <div class="penalty-section">
                <button @onclick="() => ModifyPenalty(ref team2Penalty, 1)" class="large-button">Penalty +</button>
                <button @onclick="() => ModifyPenalty(ref team2Penalty, -1)" class="large-button">Penalty -</button>
            </div>
        </div>
    </div>
    <div class="timer-control">
        <h2>Control de Temporizador</h2>
        <div class="controls">
            <button @onclick="StartStopTimer" class="small-button">@((timerRunning ? "Parar Timer" : "Empezar Timer"))</button>
            <button @onclick="ResetTimer" class="small-button">Reset Timer</button>
            <button @onclick="UndoLastAction" class="small-button">Deshacer Acción</button>
        </div>
        <div class="timer-display">
            @timerMinutes.ToString("D2"):@timerSeconds.ToString("D2")
        </div>
    </div>

    <div class="round-control">
        <h2>Control de Round</h2>
        <div class="controls">
            <button @onclick="PreviousRound" class="small-button" disabled="@isFirstRound">Anterior Round</button>
            <button @onclick="NextRound" class="small-button" disabled="@isLastRound">Siguiente Round</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public string GroupName { get; set; } = string.Empty;

    private int team1Score = 0;
    private int team2Score = 0;
    private int team1Penalty = 0;
    private int team2Penalty = 0;
    private int currentRound = 1;

    private Timer timer;
    private int timerMinutes = 2;
    private int timerSeconds = 00;
    private bool timerRunning = false;

    private HubConnection hubConnection;

    private Stack<(string Team, int Points)> actionHistory = new Stack<(string Team, int Points)>();

    private bool isFirstRound => currentRound == 1;
    private bool isLastRound => currentRound == 3;

    protected override async Task OnInitializedAsync()
    {
        timer = new Timer(1000);
        timer.Elapsed += async (sender, e) => await OnTimerElapsed();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/scoreboardHub"))
            .Build();

        hubConnection.On<int, int, int, int>("ReceiveScoreUpdate", (t1Score, t2Score, t1Penalty, t2Penalty) =>
        {
            team1Score = t1Score;
            team2Score = t2Score;
            team1Penalty = t1Penalty;
            team2Penalty = t2Penalty;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int, int, bool>("ReceiveTimerUpdate", (minutes, seconds, isRunning) =>
        {
            timerMinutes = minutes;
            timerSeconds = seconds;
            timerRunning = isRunning;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("ReceiveRoundUpdate", (round) =>
        {
            currentRound = round;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGroup", GroupName);
    }

    private async Task OnTimerElapsed()
    {
        if (timerMinutes == 0 && timerSeconds == 0)
        {
            timer.Stop();
            timerRunning = false;
        }
        else
        {
            if (timerSeconds == 0)
            {
                timerMinutes--;
                timerSeconds = 59;
            }
            else
            {
                timerSeconds--;
            }
        }
        await UpdateTimer();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateScore()
    {
        await hubConnection.SendAsync("UpdateScore", GroupName, team1Score, team2Score, team1Penalty, team2Penalty);
    }

    private async Task UpdateTimer()
    {
        await hubConnection.SendAsync("UpdateTimer", GroupName, timerMinutes, timerSeconds, timerRunning);
    }

    private async Task UpdateRound()
    {
        await hubConnection.SendAsync("UpdateRound", GroupName, currentRound);
    }

    private void AddPoints(ref int score, int points)
    {
        score += points;
        actionHistory.Push((score == team1Score ? "Team1" : "Team2", points));
        UpdateScore();
    }

    private void ModifyPenalty(ref int penalty, int amount)
    {
        penalty = Math.Max(0, penalty + amount);
        UpdateScore();
    }

    private void StartStopTimer()
    {
        timerRunning = !timerRunning;
        if (timerRunning)
        {
            timer.Start();
        }
        else
        {
            timer.Stop();
        }
        UpdateTimer();
    }

    private void ResetTimer()
    {
        timer.Stop();
        timerRunning = false;
        timerMinutes = 1;
        timerSeconds = 50;
        UpdateTimer();
    }

    private void NextRound()
    {
        if (currentRound < 3)
        {
            currentRound++;
            ResetTimer();
            UpdateRound();
        }
    }

    private void PreviousRound()
    {
        if (currentRound > 1)
        {
            currentRound--;
            ResetTimer();
            UpdateRound();
        }
    }

    private void UndoLastAction()
    {
        if (actionHistory.Count > 0)
        {
            var lastAction = actionHistory.Pop();
            if (lastAction.Team == "Team1")
            {
                team1Score = Math.Max(0, team1Score - lastAction.Points);
            }
            else if (lastAction.Team == "Team2")
            {
                team2Score = Math.Max(0, team2Score - lastAction.Points);
            }
            UpdateScore();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.SendAsync("LeaveGroup", GroupName);
        await hubConnection.DisposeAsync();
        timer?.Dispose();
    }
}
